#https://www.youtube.com/watch?v=W9QJ8HaRvJQ

lis = [1,2,3,4,6,7,8,9]


def bin_search(num, find_num, low, high):
    
    if high >= low:
      mid = (low + high) // 2 
      if num[mid] == find_num:
        return mid
      elif num[mid] < find_num:
        low = mid + 1 
        return bin_search(num,find_num,low, high)
      else:
        high = mid -1
        return bin_search(num,find_num,low, high)
    else:
      return low


print(bin_search(lis,5,0,8))





### Find first and last occurance of the target (return index of first and last.)
def bin_search(num,find_num,first=True):
    
    low = 0
    high = len(num) - 1
    while low <= high:
        middle = low + (high-low) // 2
        if num[middle] == find_num:
            an = middle
            if first:
                high = middle -1
            else:
                low = middle +1
        elif num[middle] < find_num:
            low = middle +1
        else:
            high = middle -1
    
    return an


x = [1,2,3,4,4,4,4,4,4,4,5,6,7,8,9]
ans = [-1,-1]

ans[0] = bin_search(x,4,first=True)
ans[1] = bin_search(x,4,first=False)
print(ans)



#########################################################################
### find the target from infinite numbers dont use length on binary search as its infinite.)

# some issue in this code 


def ans_1(num, target):
    low = 0
    high = 1
    #print(num[high])
    #print(target)
    while (target > num[high]):
        temp = high +1
        high =  high + (high - low + 1) * 2
        low = temp
    return (bin_search(num,target,low,high))
        
def bin_search(num, find_num, low1, high1):
    #low1 = 0
    #high1 = len(num)
    while low1 <= high1:
        middle = low1 + (high1-low1) // 2
        if num[middle] == find_num:
            return middle
        elif num[middle] < find_num:
            low1 = middle +1
        else:
            high1 = middle -1
    return -1


x = [1,2,3,4,5,6,7,8,9]

print(ans_1(x,7))

#



#################find Peak element 
"""        
def bin_search(num):
    low1 = 0
    high1 = len(num)
    while low1 <= high1:
        middle = low1 + (high1-low1) // 2
        #print(middle,num[middle],num[middle+1])
        print(low1,high1,middle)
        if low1 == high1:
            return num[low1]
        elif num[middle] > num[middle+1]:
            high1 = middle 
        elif num[middle] < num[middle+1]:
            low1 = middle+1
        
    return -1


x = [1,3,15,7,6,4,2]

print(bin_search(x))
"""



def bin_search(num):
    low1 = 0
    high1 = len(num)
    while low1 < high1:
        middle = low1 + (high1-low1) // 2
        if num[middle] > num[middle+1]:
            high1 = middle 
        else:
            low1 = middle+1
    return num[low1]


x = [1,3,15,7,6,4,2]

print(bin_search(x))
